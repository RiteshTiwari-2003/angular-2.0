-> Angular notes:-
    introductiuon of angular:-
Angular is typescript based open source famework for building dynamic , modern web application ,
developed and maintained by google , anguler provide a comprehensive platform for creating highly responsive and scalable application.

-> key feature of angular:
1. component based architecture :
application are build using reusable , self contained component,making the development process moduler and amintainable 
2. two ways data binding:
synchronizes data between the model(logic) and view(ui) in real time, reducing boilerplate code and inhancing user interaction
3. dependency injection :
pramotes moduler design by providing a buildin dependency injection system to manage service objects 
4. directives : 
extend html with custom tag or attributes, enabling developer to build dynamics interactive ui interface .
5. rxjs(reactive programming):
provide tools for handling asynchronous data streams , making angular application more responsive .
6. routing and navigation :
the build in anguler router enable the creation of single page application with seamless transition between views.
7. ahead of time compilation :
convert html and type script code into optimized javascript code during the build process, improving performance.
8. cross platform support:
anguler can be used for building web , mobile and desktop application.
-- view layer of application 
--> with the help of anguler we can develop single page application , single page application are those application which develop only in one page ,
which is index.html, the data is just updated in the dom without refreshing or reloading whole application .
that is the single page appication 
in traditional application : whenever we go for any of the link , the entire page is reload and all, right now the single page application 
the page is not refreah or reload .
-> developed and maintained by google .

single psge application are those application which developp only in one page , the content is updated  without reloading or refreahing whole page

--> Envoirment setup(installation):-
node js envoirment 
   --> download and install node js 
   node >20
if node installed in system then for angular install angular cli(command line interface):
it provides commands for creating , building , testing and deploying angular application.(ng command) : new generate command
npm i @angular/cli --g
after instaling above package when you want to check ng version type ng --version
and in that folder where you want to put angular project open that folder in cmd and type ng new demo(project_name) and enter .

--> how we run angular application:-
go to your project folder like :- cd demo
ng serve --o
to run angular application every time you should run ng serve 
and --o is a flag to open your application in a default browser if you not putting --o then you should manually open it.
open in default port 4000

why choose angular?
1. powerful framework: 
include all tools required for large scale application .
2. active ecosystem: backed by google ,with frequent update and large community.
3. scalable : well suited for enterprise level projects.
4. typescript integration : enhance code quality with strong typing .

for angular documentation refrence:-
https://angular.dev/overview
for project folder structure reference
https://angular.dev/reference/configs/file-structure

--> how angular application run or boot:-
ng serve whenever i run ng serve then it goes to the angular.json file--> thenit call entry point file--> one is index.html and typescript entry point file is main.ts  
in that index.html there is <app-root></app-root> what is the app-root app-root is selector which is define in App component the App component 
is default component 
so you can find that component in src/app folder in app folder app.component.ts  app.component.html app.component.css file app.component.spec.ts  
app.component.ts (logic) 
   in app.component.ts we find app-root selector (so we can say that that app component is just called in index.html which is default component)
app.component.html(view)
app.component.css (component css) 
app.component.spec.ts (testing file)

there is two type of entry point file one is index.html and one is main.ts typescript entry point file
-> in new version > 17
it boot the App component and load AppConfig file in the application .
-> below it 
it boot the AppModule and in appmodule it boot the app component 

so in this way in the old approach is module based approach nut right now it changes as configuration based approach.
in anular project file structure src folder is main folder where all these file folder present like :
app folder
index.html file which is main entry point file for single page application , this is the file where entire application is run 
single page application are those type of application which run on index.html 
that is file which is just render in your browser whenever you serve the application 
the main.ts is main typescript file where the entire appication flow is working .

and app folder is application folder 
where these file present 
app.component.css
app.component.html,
app.component.ts
app.component.spec.ts
app.config.ts,
app.routes.ts
here you update the all the code of the application either it commponent or bla, bla bla,
app.routes.ts is routing file , app.config.ts is configuration file before anguler 17 there is app module but from angular 17 the moduler approach is change and configuration approach start

in every project there is angular.json file:-
cli configuration (command line configuration) for all project in the workspace , incuding configuration option for how to build, serve , 
and test each project , 

package.json file:
configure npm package dependencies that are available to all projects in the work space ,
this is very importent on that time when you push all code on github and dont push node_module file beacuae this file is very heavy so whenever you want to install any npmpackage again
then you can install with the help of package.json 


application source file :
all the file which present under src folder are application source file;
1. app folder: constain the component files in which your application logic and data are defined 
2. index.html file: the main html file page that is served when someone visit your site , 
the cli automatically adds whole javascript and css files when building your project , so you typically dont need to install or add script or link tag here 

within app folder many file present like :
1. app.config.ts : define the application configuration that tell angular that how to assemble the application , as you add more providers 
to the app they should declare here.

2. app.component.ts:define the application's root component ,named AppComponent. the view associated with this root component becomes the root of view hierarchy
as you add component and services in your app.

3. app.component.html: define the html template associated with AppComponent

4. app.component.css : define the css stylesheet for AppComponent.

5. app.component.spec.ts: define unit test for AppComponent

so we see that in our index.html our default component is loaded and we are just configuring that particuler component in main.ts

so main concept in angular is component :
component play a crucial role in angular , component is core building block of the anguler application and they are used for reusability

how we create a component :
ng generate component componentname
or
ng g c componentname
-> when we create a component 
---> it create a componentname folder 
         .ts
         .css
         .html
         .spec.ts

# supposen for my project i want to create two component ;
1, one thing where you want to create -> in yur project folder my project folder is right now demo 
so i just open the demo directory in my command , when you want to put all of the component in one folder then jsut define a folder like in demo directory
in cmd write ng g c components/home like where components folder in main folder where we can put all component 
like just when components folder is not present in app folder then make a components folder like this 
so first component i just creating i shome component 
like ng g c components/home
and second component is i am creating about 
like ng g c components/about
so now when i see file structure in demo folder then in src folder in app folder a components folder present in which two folder present home and about and in these folder in every folder these four file present 
app.component.html 
app.component.css
app.component.ts
app.component.spec.ts
** in angular 17, there is a approach of module (AppModule), so if we create a component it automatically update in AppModule 
so that we can use that component anywhere .

but from 17 version , there is concept of standalone component, if we create a component by default they are standalone.

-> standalone component : standalone component are those component : they are self-contained units of code that can be used anywhere 
in the application without being of an module 

before this anguler 17 , if we create a component , it automatically load in a appmodule , if it automatically load in app module so either it can use 
or not it execute the memory ?
thats why the reason anguler introduced the standalone components 
whenever you have a requirment , you just need to inject it , otherwise it can not take any of the memory .
understand these are the standalone component.

--> how we call the component in another component 
like when you add two component like home and about in app folder in src folder and when run the application it give error
but in app folder in app.component.ts when you import AboutComponent and HomeComponent then application properly work
so there is no make sense to add standalone true for component by default components are standalone 

#### so how to call other component from another component 
you just import app.componentname and in app folder in app.component.ts you just import alongwith routeroutlet all that component like HomeComponent , AboutComponent

### started importent feature concepts:-
so first is data binding (dynamic data binding):
databinding work in two ways:=
   ---> one way databinding 
   ---. two way data binding 

--. one way binding;
in that data flow from one direction either from view to component or component to view 
    -- from component to view :- assume that component means ts file where we have some data and in a view we want to render that data 
    we want to display that dynamic data 
    so from component to view we have concept of interpolation/expression 
    {{}}
    eg:
    in your component file .ts i have a title 
    tite="Hello Guys"
    .html (and in html in view we want to render that data that is dynamic data)
    <h2>{{title}}</h2>### one way data binding from component to view

    --. property binding []:
    it allows us to bind html element attributes to a property in a component.
    assume that in my home component i have a property like isActive , i have a varibale which is boolean , bydefult i assigning the value true 
    so with the help of property binding we can bind this property to the attribute of the element , asume that i have a button , there is attribute disabled ([disabled]) 
    and i am just binding to the property binding like [disabled]="isActive"
    .ts
    imagePath:string="";
    .html
    <img [src]="imagePath"/>

    --> from view to component 
       --> event binding 
       it is achived with the hep of parenthesis (): event binding simple means event handling , it allow us to bind events such as click ,dblclick,
       mouseover, to a method in a component 
       eg:
       .html
       <button (click)="xyz()"></button>
      .ts
      xyz(){
         alert("Hello");
      }

   next topic :
   ---> two way data binding 
   ---> directives (if , for , switch)
   ---> routing (spa)

   ### 2 way data binding :it allow data to flow between a component and view , keeping them sync.it means that when you change the data in component then 
   it automatically change in view . and same if there change anything in view it automatically change in component also.
   when data change in a model the view reflect the changes and vice versa .
   this two way data binding achived withthe help of property binding and event binding combination of these two binding property binding and event binding 
   [()] : banana syntex (property + event )
    -> used in form field 
    to use two way data binding we use ngModel directive , so that property we finds in forms module then first we need to load FormsModule
like we use two way data binding in test component in test.component.html we use a input tag in which we use banana syntex in which we put ngModel
and give some property to that attribute of input like [(ngModel)]=name where name is property in test.component.ts so wheneever we update or change the input value it automatically
changes also in view in name value in test.component.ts like whenever we perform changes in component in anydata then that data also change automatically in view .

for this you also put in import in test.component.ts FormsModule .

ngmodelis property of FormsModule and ngmodel is directive a builtin directive and by which we got two way data binding.


--> directives in anular:-
they are defined as classes
that can add new behaviours to the element or modifying existing behaviours.
with the help of it what happen assume that in a page i have some content so i want to change the look 
and feel of the element at runtime or we want to change some dynamic data , i just want to remove that particuler element from the dom
or we just need to add a new element these all the thing dynamically which is happen with the help of directives 

--> it is used to manipulate the dom by adding new element or removing and even changing the appearence of the element .

--. types of directives :
1. component directive : every component work as a directive because it have template or template url.(app-componentname)
2. attribute directive ; is used to make behavoiur or element changes in the appearence of a element (styles) so basically for changing the styling part and all we can use 
the attribute directive so whenever we dynamically we want to change some style and all so we have some in build attribute directive that we are using like 
(inbuild: ngStyle or ngClass )
3. structural directive : structural directive is iused for the dom manipulation , it is used to make the changes in layout of the dom 
element can be added or remove , it chANGES THE STRUCRE OF THE DOM (inbuild: *ngIf , *ngFor, *ngSwitch)
after angular 16 we can use this like @if @for @switch 
*ngIf :- for conditional rendering . it conditionally include template if value is true 
eg:
in .ts file 
courses:[]string=["A","B","C","D"]
.html
<div *ngIf="courses.length>0 else xyz">
//courses display</div>
<ng-template #xyz>No Course found</ng-template>

#### if you want to use old in build directive you need to import CommonModule in your web page 
ngIf directive not working for this you also must need to import CommonModule in in test.component.ts and for working of ng-template you need to import NgTemplateModule in test.component.ts 

--> *ngFor : it work like a loop , it renders each element for the given collections whenever loop is going on 
syntex :
<ul>
<li *ngFor="let c of courses">{{c}}</li></ul>


---> ngStyle : basically it updates style for the element , so whenever you just need to call it anywhere , it like a property binding it just bind it [ngStyle] and as an atribute we can call anywhere 
<element [ngStyle]="{}"></element>

---> ngClass : it allow us to set css class dynamically to an element .
[ngClass]="{'success':condition}"

----#### Boot strap is nothing it is css property and framework it provide us a inbuild class 

how we integrate bottstrap in angular 
   -> npm install bootstrap --save, in your project like in deo directory you first need to install bootstrap after installation of bootstrap
   in demo in src folder in angular.json file in styles key put one more value like "node_nodules/bootstrap/dist/css/bootstrap.min.css"
   and in scripts key put value like this "node_nodules/bootstrap/dist/js/bootstrap.bundle.js"

--> restart the application 
so whenever any changes in angular.json file you need to restart it so in command prompt in demo directry first for restart write cls and hit enter then
run ng serve --o


$$$$#### angular pipes :-
they are spaical operator that allows us to transform data in our template .
to use pipes we have (|) pipe symbols 
--> we have inbuild pipes 
Uppercase 
Lowercase
Date
titlecase
currency
async
percent
slice 
--> in new version to use pipe we need to import CommonModule same as we use for ngFor nad all directives 
like in about component i use currency pipes
in about.component.ts i put a amount:Number=568789;
and in about.component.html i put <P> {{amount|currency}}</p> but i got error 
because currency take string format so i replace Number from any datatype in about.component.ts or you can replace with also string but you should give value in quotes.

#### Routing :
It enable navigation between different views or components because it is a single page application navigating from one view to another 
so basic definition is that it enable navigation between different views and components within a single page application.
it allow user to move between multiple pages without reloading the whole page 
in routing have some terms :->
Routing have some 
-> RouterModule: it enables routing functionality in angular

-> Routes: here we define the path .(URLs) and associate components to display when a specific path is match with URL.
eg:
export const routes:Routes=[
   {path:'',component:HomeComponent},
   {path:'about-us',component:AboutComponent}
];

-> RouterOutlet:  it is the directive which is load the component when path is matched with the url (container)
<router-outlet></router-outlet>
-> RouterLink: it is the directive which is used to define links (hyper links) in angular application.
<a RouterLink="/">Home </a>
<a RouterLink="/about-us">About Us </a>
-> 

it means that in a , in a routing mechanism if you just click on about us it just check a path in this line    
export const routes:Routes=[
   {path:'',component:HomeComponent},
   {path:'about-us',component:AboutComponent}
];
if path is matched , about component is load in a routeroutlet <router-outlet></router-outlet>
<section>
<router-outlet></router-outlet>
</section>

#### child routes or nested routes 
{
   path:'url',component:componentname,children:[
      {path:'',component:componentname}
   ]
}
#### angular component lifecycle method :Every component have their own lifecycle , these lifecycle hooks are a powerful way when angular 
initializes, updates or destroy component.
stages --->
Mounting (initialize)
updating 
unmounting(destroy)

so whenever the component is load a component has its own lifecycle means first if you call the component first it is initialize when data have changes then
updated and whenever you leave from one component to another then it is destroy
so in this initialization phases if you want to perform some operation and all, so angular gives you some functionality to achive this

*** the ifecycles hooks are ivoked automatically.
--> methods of ifecycle :
-> ngOnChanges(): it is called whenever one or more input properties are change, so basically we have two component and one component is loaded in another component 
that is input property.so it is called when any input property is change.
   -> SimpleChanges object which contain current and previous value
   so whenever we are just implementing it so in ngonchanges we find current value and a previous value also that is the benifit of ngonchanges .
   -> ngOnInit(): called only once when a component is initialized , it is agood place where we fetch data from api.
   -> ngDoCheck(): called during every change detection run(custum), so wec an use that one whenever we implement our own implementaion there 
   so custom change detection means a logic which i am just creating it 
   then some of the functionality for child part :-> 
         -> ngAfterContentInit(): whenever our content (html) is just load then it is called.
         -> ngAfterContentChecked(): every time it is called if any there change happen in the content at the child lavel
         -> ngAfterViewInit(): you are jsut loading a application but some of the javascript you want to load after some time so we can load that javascript after view init.
         when our entire view part is initialized then the functionality is called , it is called once hwnen after angular fuly initialize the 
         component view and child view both main parent and child then after that itt is loaded 
         -> ngAfterViewChecked(): and whenever the parent and child views has been checked then it is called 
   -> ngOnDestroy()-> called before component is destroyed . good place to clean up unwanted data

   --> mainly used : ngOnInit(), ngOnDestroy(), ngOnChanges(),ngAfterViewInit()
ngOnInit(): in a product component you want to display the product do i want to call the product api in the ngOnInit() 
whenever a component is load api nis called and it will render the data 

like when i was in product navbar and in product i have some unwanted data so when i want to go in contact page then i want to remove unwanted data the call ngOndestroy()

network call or http call :-->
how we consume api in angular
before the angular 16 cersion we have HttpClientModule
HttpClient(it is an  service )
   get | post | put |delete
   right now we have many website which give us fake api the most common one is jsonplaceholder 
   https://jsonplaceholder.typicode.com/ 
-> app.config.ts in this file we just need to import provide http client
so provideHttpClient provide http client for that package, so before the angular 17 we use the HttpClientModule but aftetr 17 we provide that 
particuler package like provideHttpClient to access the api and all

-> app.config.ts:-
import {provideHttpClient} from '@angular/common/http';
providers:[provideHttpClient()]
suppose i want to create a post component to display all the post from jsonplaceholder
in a HttpModule we have http client service , so there are two ways either you can create of instance of it but from the version 
i just want to create the object of the http client , so in new version we need to just use instance of it like in post.component.ts 
http=inject(HttpClient);
but in old version i need to implement it like 
constructor (private http:HttpClient){
   so for whenever my component is just load for that we have ngOnInit()
}

**** communication between multiple component:-
    -> parent to child (Input decorator)
    and child to parent(output decorator with EventEmitter class)
        --> in both we need 2 component one is parent and 2nd one is child
for parent to child (input decorator):
parent html :about component
<h2>Parent to child with input decorator</h2>
<button (click)="xyz()">Counter</button>
<app-childinput [mycount]="count"></app-childinput>

parent ts file :
import { Component } from '@angular/core';
import { ChildinputComponent } from '../childinput/childinput.component';

@Component({
  selector: 'app-about',
  imports: [ChildinputComponent],
  templateUrl: './about.component.html',
  styleUrl: './about.component.css'
})
export class AboutComponent {
  count:number=0;
  xyz(){
    this.count++;
   

  }

}

child html content:
<h5>Child Component</h5>
<p>the parent count value is {{mycount}}</p>
 child ts file content:
 import { Component,Input } from '@angular/core';

@Component({
  selector: 'app-childinput',
  imports: [],
  templateUrl: './childinput.component.html',
  styleUrl: './childinput.component.css'
})
export class ChildinputComponent {
  @Input() mycount!:number;

}

*** now we learn for child to parent like service component is parent and childoutput component is child output and we can access any daata
from child to parent 
parent html :
<h2>Child to parent communication with output decorator with EventEmitter class</h2>
<p>The child counter value is {{counter}}</p>
<app-childoutput (myevent)="abc($event)"></app-childoutput>
 parent ts file:
  
  import { Component } from '@angular/core';
import { ChildoutputComponent } from '../childoutput/childoutput.component';

@Component({
  selector: 'app-service',
  imports: [ChildoutputComponent],
  templateUrl: './service.component.html',
  styleUrl: './service.component.css'
})
export class ServiceComponent {
  counter:any=0;
  abc(data:any){
    this.counter=data;
  }

}

child html :
<h2>child component</h2>
<button (click)="xyz()">Counter</button>

child ts file:

import { Component,Output,EventEmitter } from '@angular/core';

@Component({
  selector: 'app-childoutput',
  imports: [],
  templateUrl: './childoutput.component.html',
  styleUrl: './childoutput.component.css'
})
export class ChildoutputComponent {
  @Output() myevent=new EventEmitter();
  count:any=0;
  xyz(){
    this.count++;
    this.myevent.emit(this.count);

  }

}


**** Services in angular :-
Services are classes that provided functinality across multipe components in the application , basically they are used for the reusability 
-> they are used to handle task like data fetching from apis 
with the help od service we can define our functionality in a file and we can use anywhere 
-> inbuild services 
-> custom services  to create a custom service thiscommand write :  ng g s servicename
services are injectable 
to access servbices in a component first we import it then create the instance of it in a constructor
then with the help of instance we access the method of services 
eg:
import AuthService from '/path';
constructor(private auth:AuthService){}
this.auth.getdata();

assume that in my home component i just want data from services 
so advantage of services is that whenever you want to access inanother component also you need to create instance of like home component and access data in any component.


#### forma validation and form handling in angular 
   1. Template form 
   2. Reactive forms 

   -> template forms or template driven forms :-
      template form is a simple form  
      not used in complicated or dynamic forms 
      so whole cod eis implemented in html file 
      here we used ngModel as discsed  in two way data binding, ngModel is used to setup forms control
      ngForm: we can set up our forms 

**** mainly i have used reactive forms 
reactive forms it is a moduler form , which have more option as compaire to the template form .they are scalable , reusable ,
-> to use it we need to import ReactiveFormsModule
so we have some buildin classes like in this have 
FormGroup
FormControl
FormArray
the more code is write on ts file but in template driven form we can write code in in html file

** params (called as parameter): parameters send throgh urls .
we just to define like in routing {path:'category/:cname',component:componentname}
-> to read params in the component 
we have  aservice ActivatedRoute with the hep of that service we can access the parameters

--> crud application in angular 
  --> apis
      for the api we jsut use the (jsonserver: node-modules) it is a nodemodules which create REST APIS in very less period of time with the help of json file (testing)
      for this json server you just need to install npm i json-server --g

      for thius we need to create new app using ng new crudapp

      --> first create a product service 
      ng g s services/product
      --> create a product model(interface)
      ng g i services/product

whwenever i have done http calls services play importent role in this.

*** local data storage:
    --> cookies: store small amount of data upto 4kb
    --> localStorage: upto 5 mbof data. it is permanent
        in local storage how we set data 
        -. how we set data
        localStorage.setItem(key,value)
        -> how we get the data
        localStorage.getItem(key)
        -> how we remove the data 
        localStorage.removeItem(key)
    --> session storage: upto 5 mb od data and it is temperary, it is applicable only hwenever your application is running 
    -. how we set data
        sessionStorage.setItem(key,value)
        -> how we get the data
        sessionStorage.getItem(key)
        -> how we remove the data 
        sessionStorage.removeItem(key)
how to check localstorage in console 
click on inspect 
click on add button 
click on application option
then click on local storage


custom pipes (create your own pipes):
ng g p pipename
    .ts 
    @Pipe decorator - pipename , and the method that pipe transform 
    pipetransform method in interface to define logic of custome pipes

whenever we consume the api with the help of HttpClient as  i told you that that particuler service return the response in observable format 
so what is that observable and all? so there all are the part of RxJS , that is concept in angular that is a library which angular uses and all 
there is some theoritcal concept 
RxJS library in angular :it is poerfull programming language for reactive programming in angular development ,
it uses observable that makes it easy to compose asynchronous or event based program by providing a set of powerful operator 
angular used this library for dealing event , stream of data , and asynchronous operations 
RxJS build on top of concept of observable , which are sequence of value that can be emmitted over time,and observe , which can subscribe to these observable 
to receive notification of new values.
-> observable: define multiple values.
-> observers:subscribe the observable values.
eg: HttpClient Module return observable  when making http request .
when an observer subscribe to an observable , the observable begins to emit values and observer callback are called with these values 
the observer also can unsubscribe from the observable to stop reseaving values .

-> RxJS provide a wide range of operators to filter the observer data:
-> Map: transform the value before subscribe 
-> filter : filter the value before subscribe
-> merge : combine multiple observable into single.


-> RxJS Subject; it is a spacial type of observable that is designed to implement asynchronous, event based programming 
by using observable sequence.
-> subjects are multicast(support multiple subscription)
-> subjects are use for the state management (we can put data in an subject and we can access anywhere in the application )
-> we can emit the value using next() method
-> does not have an initial value so subscriber onlly receives value emmitted after they subscribe
what happen whenever we on add to cart , we jsut refrah the page but as per the single page application , whenever i click on add to cart it automatically
updated , so we just need to manage the state without refreshing the page so with the help of RxJS subject we can actually achive it  

in javascript we basically uses promise and other thing for handling asynchronous programming but in angular we use RxJS observable 

so in interview this question asked by interviewer that what is the differnce between observable and promise?
the main differnce in promise and observable is that observable return multiple value but promise return only single value at a time, 
observable are cancelable in some time , but promises are not cancelable either it is resolved or rejected you can not cancel it 
these are some advantage of observable through the promise part 
in promise for consuming the vaue we use then but here in observable for consumin or for observe thing we use subscribe 

in observable we have multiple operator to filter our data but in promise , if we cant.
assume observable return multiple value before subscribe you can filter it using map filter or merge so the appropiate data we can subscribe 


**** Gaurds in angular:
the role of the gaurds to protect our routes 
means onlt the autherized person can visit that routes .
they are interface that allow us to control navigation within the application.
basically gaurd is the power part of anguler route module
types of gaurd:
  CanActivate: we commaly used that one wheter can route activate 
  CanActivateChild: for the child route
  CanDeactivate: when user leave a route like when you are submitting a form a leave without submitting it then a pop up is coming that can you away from this page.

  Resolve : prefetches the data before navigating to the route 
  CanLoad: lazy loading or (on demand loading)

  creating a gaurd using ng g g gaurdname

  lazyoading on demand loading:
  whenever we have requirement only that time this is load
  like in app.proute.ts whenever my application is executed this all the component are loaded wich present in app.route.ts 
  it is ok that home component is default component whenever my applicatio is executed the home component is loaded but what about product , add and edt this 
  these compoennt are only load when user click on product then at that time it is load 
  so the performance of application is fast and all 
  before angular 16 and all we have a load children concept we have module approach and all to achive it 
  but in angular 18 
  like app.route.ts:
//import { ProductsComponent } from './components/products/products.component';
import { Routes } from '@angular/router';
import { HomeComponent } from './components/home/home.component';
//import { AddproductsComponent } from './components/addproducts/addproducts.component';
//import { EditproductComponent } from './components/editproduct/editproduct.component';
import { authGuard } from './gaurds/auth.guard';
import { leaveGuard } from './gaurds/leave.guard';

export const routes: Routes = [
    {path:'',component:HomeComponent},
    //{path:'products',component:ProductsComponent},
    {path:'products',loadComponent:()=>import("./components/products/products.component").then((m)=>m.ProductsComponent)},//iit return in a promise sowe use then () method
    {path:'addproduct',loadComponent:()=>import("./components/addproducts/addproducts.component").then((m)=>m.AddproductsComponent),canActivate:[authGuard],canDeactivate:[leaveGuard]},
    {path:"editpro/:id",loadComponent:()=>import("./components/editproduct/editproduct.component").then((m)=>m.EditproductComponent)},
];


--> How we build angular applications for production
we have a command ng build 

Subject and BehaviouralSubject are both same , so the basically they are used for the state management whwenever we want have a data and we can access the data anywhere 
in our application and all so only the difference between these two is that they are the observabe and we can get the data with the help of subscribe as same wayonly different is that in Subject we can not initializea initial value
thats why the reason i want to use BehaviourSubject because i want to get the localStorage data in our subject part by default , thats why i use behavioursubject.
if you peform change in your local then again build using ng build and perform againg and agian thing in server

so question is what is the localStorage
localStorage is a web storage api in javascript that allow you to store in key value pair persistently in a user browser , 
the stored data does not expire and remain available even after the user closes and reopen the browser.

key feature of localStorage:
persistent storage:
data stays until explicitly removed 
stores data as a string: even if you store object they are converted to string.
5 mb limit: each origin (domain) gets around 5 mb storage 
synchronous api: reading/writting blocks the main thread
common method; save data :
localStorage.setitem("username","ritesh")
retrieve data:
let user=localStorage.getitem("username")
console.log(user);//ritesh

3. remove specific data:
localStorage.removeItem("username");
4. clear all data:
localStorage.clear();

----> storing objects:
since localStorage only store strings, you need to covert objects using JSON.stringify() and retrive them using JSON.parse()
let user ={name:"Ritesh",role:"Developer"};
localStorage.setItem("user",JSON.stringify(user));
let retriveusers=JSON.parse(localStorage.getItem("user"));

console.log(retriveusers.name);

what is the difference between readonly and disabled 
1. read only attribute:
applies onlyon input and textarea elements 
user can not modify the field but can select and copy the text.
the feilds value is submitted with the form 

2. disabled attribute :
appies to all form element (input , textarea, select, button, etc)
user can not modify , select and focus the field 
the dields value is not submitted with the form 

in form one attribute is action attribute it tell us then if form is submitted then what action you want to perform 
so suppose that if user click on submit then user want to move on next page 
action define the action to be performed when the form is submitted and i f the action attribute is omitted ,
the action is set to the current page .

method :
method specifies the http method(get and post) to be used when submitting the form data 

target ;
specify if the submitting result will open in a new browser or in current window 

method type in html form "
get and post :  1. get: sends form data as url parameter 
data is visible in the url , making it less secure 
limited data size 
canbe bookmarked and cached 
suitable for retrieving data 

2. post method;
send form data in request body not in url,
more secure for sensitive data 
no size limitition on data.
can not be bookmarked and cached .
suitable for storing , updating and deleting data .

html form input type 
color: used for input field , that should contain a color.
date: used for input field that should contain a date.
datetime-local: specifies a date and time input field, with no time zone.
time; allow the use to select a time (with no time zone)
week: allow the user to select week and year .
month : allow the user to select a month and year 
email : usef for input field that should contain an email address.
number ;: define a numeric input field 
range ; defining a control over for entwering a number whose exact value is not importent 
, default range is 0 to 100, however you can set restriction on what number are accepted with the min, max and step attribute 
for uploading any file we use file type input <input type="file" /> if you want to upload more than one file together then use multiple attribut elike this 
<input type="file" multipe/>

what is the fifferent between select and datalist in html form 
select functionality: select provide a drop down menu with predefined option 
datalist functionality: datalist provide a list of suggested option while allowing user to enter custom input

user input in select; users can select only from given options 
but in datalist : user can select from suggestions and or enter a different value 

tag uses in select:
uses option tag inside select tag
in datalist uses option tag inside datalist but linked witha input tag that datalist.

apperance :
select aways appear as a dropdown menu.
datalist : appear as input field with auto suggested when typing 

css 3 flex box 
the flex container properties are :
flex-direction: row| row-reverse|column|column-reverse
flex-wrap: wrap|no-wrap|wrap-reverse
flex-flow: combination of flex-direction and flex-wrap 
justify-content: flex-start,flex-end,center,space-around,space-between

transition in css3 :
css3 transition allow you to change the property values smoothly , over a given duration 
transition sub properties:
transition
transition-property
transition-delay
transition-duration
transition-timing-function 
transition-delay: means after how much duration transition will start.
transition-property: means on which property you want to apply transition effect.
transition-timing-function: how the transition happen
<html>
<head>
<style>
div{
   width:20%;
   height:20%;
   border:splid;
   background-color:black;
   transition-property:width;
   transition-duration:2s;

}
div:hover{
   width:50%;

}
</style>
</head>
<body>
</body>
</html>

css transformation:
css transformation allow you to move rotate, scal and skew elements, with the css transformation
property you can use the following 2d tranformation methods:
translate(200px,300px)
translateX(200px)
translateY(200px)
rotate(180deg)
scaleX(3)
scaleY(3)
scale(3,.05)
skewX(180deg)
skewY(180deg)

<style>
div{
   width:20%;
   height:80%;
   border:solid;
   background-color:azure;
   position:relative;
   transition:top left;
   transition-duration:4s;
}
div:hover[
   transform:translate(200px,300px);
]
</style>

css animation:
css allow animation of html elements without javascript or flash!
@keyframes
animation-name
animation-duration
animation-delay
animation-iteration-count
animation-direction
animation-timing-function
animation
<style>
div{
   width:100px;
   height:100px;
   background-color:red;
   position:relative;
   animation-name:example;
   animation-duration:4s;
}
@keyframes example{
   0% {background-color:red; left:0px;top:0px;}
   25% {background-color:yellow;left:200px;top:0px;}
   50% {background-color:blue;left:200px;top:200px;}
   75% {background-color:green;left:0px;top:200px;}
   100% {background-color:red; left:0px;top:0px;}
}
</style>

events in javascript
events are action or occurance that happen in the system you are programming ,
which the system tells you about so you can respond to them in in some way if desired.
for example if user click on the button on a webpage , you might want to respond to tht action by displaying an information box 
below table consist type of event :
mouse event :
onclick
ondbclick
onmouseenter
onmouseleave 
keybord events:
onkeypress
onkeydown
onkeyup

form event :
onsubmit
OnChange
onfocus 
onblur

document /window event:
onload
onunload
onscroll

event handler
each available event has an event handler , which is block of code (usually a user defined javascript function) that willbe run when the event fire .
when such a block of code is defined to be run in response to an event firing , we say we are registering an event handler
event handler sometimes called as event listner.
<input type="button" onClick="myFunction()" value="try it"/>
<script>
function myFunction(){
   alert("Hello World!");
}
</script>

DOM in javascript
the document object model is a cross platform and language independent application programming interface that treats an html document as a tree 
structure wherein each node is an object representing a part of document , the dom represent document with logica tree

dom methods:
1. document.getElementById() : returns an element with an given id attribute value.
2. document.getElementsByTagName():returns an array containing all the elements on the page of given type or tag.
3. document.getElementsByClassName(): returns an array containing all the elements on the page of given class
4. document.querySelector(): returns the very first matching element as per the selector.
5. document.querySelectorAll(): returns the all matching element as per the selector.

polymorphism:
polymorphismmeans one thing in many form 
it can be achived by 
two thing ; method overloading  , method overriding 
method oberloading is that when same method define in same class multiple time but with the differnet of parameter.
polymorphism 
polymorphism is one thing in many form and it is achived by method overriding
method overriding is that a same method is defined in super calss as weel as subclass 
lets check how to implement polymorphism 


what is abstraction?
data abstraction is the property by virtue of which only essential detais are displayed to the users.
abstraction is achived by interfaces 
interfaces are declared using the interface keyword and may only contain method signature and variable declaration .
an interface is an abstract type that is used to specify a behaviour that classes must implement .
they are similer to protocals 
interface can not be instantiated but rather are implemented.

interface person{
   fname:string;
   lname:string;
   sayHi:()=>string;

}
data abstraction is the property of virtue of which only the essential details are displayed to the user .
interfaces and class
classes
define a new type
properties(with implementation)
method(with implementation)
can be instantiated 


interface 
define a new type
properties (signature )
method(signature)
can not be intansitated 

encapsulation vs abstraction
encapsulation is data hiding (information hiding ) while abstraction is detail hiding (implementation hiding)
while encapsulation groups together data and methods that act upon the data ,
data abstraction deals with exposing the interface and hiding the details of implemnentation .

what is the destructuring ?
destructuring assignment syntex is a javascript expression that makes it possible unpack values from array, properties from object into distinct variable 
var arr=[30,40,60]
var a=arr[0]
var b=arr[1];

what is the array destructuring ?
var a,b;
[a,b]=[10,20];
console.log(a);
console.log(b);
var arr=[10,20,30]
var [a,b,c]=[10,20,30];
console.log(a)
onsole.log(b)
console.log(c)

what is object destructuring ?
var o={p:42,q:true};
var{p,q}=o;
console.log(p);
console.log(q);
var obj={firstName:"Ritesh",lastname:"Tiwari"};
var {firstName:p,lastname:q}=obj;
console.log(p)//"ritesh"
or you can also write 
var {firstName,lastname}=obj;
console.oog(firstName);
var array=[5,2,3];
for(let i in array){
   console.log(i);
}// 0, 1 , 2
for(let i in array){
   console.log(typeof(i));
}
output of this should come 
string
string
string
let array=[10,20,30];
for(var val of array){
   console.log(value);
}// 10, 20 , 30

for (var val of array)[
   console.log(typeof(val));
]// number, number, number

Map 
we can create a Map using new keyword 
var map=new Map();
let map=new Map();
map.set('A',1);
map.set('B',2);
map.set('C',3);

the set method is also chainable 
var map=new Map().set('A',1).set('B',2);

or we can inititaliza map an array of key value pair
let map=new Map([['A',1],['B',2],['C',3]]);
var map=new Map();
map .set(101,"John").set(102,"zRitesh").set(103,"Rohandeep");

map methods ;
we can extract the value using get method()
map.get("A");
we can also check that particuler key are present or not using has method
map.has("A"); //true
we can also delete the key using delete method
map.delete("A");
we can check also size of map using size property
map.size
also you canuse clear method to clear all the thing 
map.clear();
for (var key of map.keys()){
   console.log(key);
}
for(var value of map.values()){
   console.log(value);
}
for(var entry of map.entries()){
   console.log(entry);
}
Sets are build like map but they only store key not key value pair 
sets are only store unique value, so adding a value a second time has no effect .
var set=new Set();
set.add('Apple');
set.add('Orange');
set.add('Banana');
set methods 
set.has("Apple");
set.delete("APple");
set.size
set.clear();

what are module?
so module is nothing but it is piece of javascripot code which contains varibale declaration , function declaration , class declaration ,e tc and 
by default these declaration have local in module 
what is export and import in module ?
the export statement is used when creating javascript module to export classes , functions , and object and primitive values from the module 
so they can be used by other program using import keyword 
a modue can import things from other modules using module specifiers :
relative paths 
absolute paths 
modules are singleton , even if a module imported multiple time only its single instance is exist .
what is multiple names export and import 

//lib.js
export const sqre=Math.sqrt;
export function square(){
   return x*x;
}
export function diag(x,y){
   return sqrt(square(x)+ square(y));}
export class employees{

   }
main.js
import {square,diag,employees} from "lib";
console.log(square(11));
console.log(diag(4,3));

//you can also import the complete module
//main.js
import * as lib from "lib";
console.log(lib.square(11));
console.log(lib.diag(4,3));

// what is single default export and import 

//myFunc.js
export default function (){

}// no semicolumn
//main1.js
import myFunc from "myFunc";
myFunc();
or a class;
//MyClass.js
export default class{

}
//main2.js
import MyClass from "MyClass";
const int=new MyClass();

in one module we can only put one default keyword thing 
## anguler cli (command line prompt)
angular cli makes it easy to start with any angular project 
angular cli comes with command that help us to create and start our project very fast
it create project generate application and library code and perform a variety of ongoing development tasks such as testing , building and development .
so what is step 
so first start angular cli in your project compter
npm install @anguler/cli -g
step 2
create a workspac3ee and initial application 
ng new my-app
step 3
serve the application 
cd my-app
ng serve --o

##### Bootstraping 
an ngmodule describe how the application parts fit together , every appication atleast one angular module , the root module that you bootstrap 
to launch the application , by convention , it is usually called as AppModule. 

