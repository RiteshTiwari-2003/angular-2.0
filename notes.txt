-> Angular notes:-
    introductiuon of angular:-
Angular is typescript based open source famework for building dynamic , modern web application ,
developed and maintained by google , anguler provide a comprehensive platform for creating highly responsive and scalable application.

-> key feature of angular:
1. component based architecture :
application are build using reusable , self contained component,making the development process moduler and amintainable 
2. two ways data binding:
synchronizes data between the model(logic) and view(ui) in real time, reducing boilerplate code and inhancing user interaction
3. dependency injection :
pramotes moduler design by providing a buildin dependency injection system to manage service objects 
4. directives : 
extend html with custom tag or attributes, enabling developer to build dynamics interactive ui interface .
5. rxjs(reactive programming):
provide tools for handling asynchronous data streams , making angular application more responsive .
6. routing and navigation :
the build in anguler router enable the creation of single page application with seamless transition between views.
7. ahead of time compilation :
convert html and type script code into optimized javascript code during the build process, improving performance.
8. cross platform support:
anguler can be used for building web , mobile and desktop application.
-- view layer of application 
--> with the help of anguler we can develop single page application , single page application are those application which develop only in one page ,
which is index.html, the data is just updated in the dom without refreshing or reloading whole application .
that is the single page appication 
in traditional application : whenever we go for any of the link , the entire page is reload and all, right now the single page application 
the page is not refreah or reload .
-> developed and maintained by google .

single psge application are those application which developp only in one page , the content is updated  without reloading or refreahing whole page

--> Envoirment setup(installation):-
node js envoirment 
   --> download and install node js 
   node >20
if node installed in system then for angular install angular cli(command line interface):
it provides commands for creating , building , testing and deploying angular application.(ng command) : new generate command
npm i @angular/cli --g
after instaling above package when you want to check ng version type ng --version
and in that folder where you want to put angular project open that folder in cmd and type ng new demo(project_name) and enter .

--> how we run angular application:-
go to your project folder like :- cd demo
ng serve --o
to run angular application every time you should run ng serve 
and --o is a flag to open your application in a default browser if you not putting --o then you should manually open it.
open in default port 4000

why choose angular?
1. powerful framework: 
include all tools required for large scale application .
2. active ecosystem: backed by google ,with frequent update and large community.
3. scalable : well suited for enterprise level projects.
4. typescript integration : enhance code quality with strong typing .

for angular documentation refrence:-
https://angular.dev/overview
for project folder structure reference
https://angular.dev/reference/configs/file-structure

--> how angular application run or boot:-
ng serve whenever i run ng serve then it goes to the angular.json file--> thenit call entry point file--> one is index.html and typescript entry point file is main.ts  
in that index.html there is <app-root></app-root> what is the app-root app-root is selector which is define in App component the App component 
is default component 
so you can find that component in src/app folder in app folder app.component.ts  app.component.html app.component.css file app.component.spec.ts  
app.component.ts (logic) 
   in app.component.ts we find app-root selector (so we can say that that app component is just called in index.html which is default component)
app.component.html(view)
app.component.css (component css) 
app.component.spec.ts (testing file)

there is two type of entry point file one is index.html and one is main.ts typescript entry point file
-> in new version > 17
it boot the App component and load AppConfig file in the application .
-> below it 
it boot the AppModule and in appmodule it boot the app component 

so in this way in the old approach is module based approach nut right now it changes as configuration based approach.
in anular project file structure src folder is main folder where all these file folder present like :
app folder
index.html file which is main entry point file for single page application , this is the file where entire application is run 
single page application are those type of application which run on index.html 
that is file which is just render in your browser whenever you serve the application 
the main.ts is main typescript file where the entire appication flow is working .

and app folder is application folder 
where these file present 
app.component.css
app.component.html,
app.component.ts
app.component.spec.ts
app.config.ts,
app.routes.ts
here you update the all the code of the application either it commponent or bla, bla bla,
app.routes.ts is routing file , app.config.ts is configuration file before anguler 17 there is app module but from angular 17 the moduler approach is change and configuration approach start

in every project there is angular.json file:-
cli configuration (command line configuration) for all project in the workspace , incuding configuration option for how to build, serve , 
and test each project , 

package.json file:
configure npm package dependencies that are available to all projects in the work space ,
this is very importent on that time when you push all code on github and dont push node_module file beacuae this file is very heavy so whenever you want to install any npmpackage again
then you can install with the help of package.json 


application source file :
all the file which present under src folder are application source file;
1. app folder: constain the component files in which your application logic and data are defined 
2. index.html file: the main html file page that is served when someone visit your site , 
the cli automatically adds whole javascript and css files when building your project , so you typically dont need to install or add script or link tag here 

within app folder many file present like :
1. app.config.ts : define the application configuration that tell angular that how to assemble the application , as you add more providers 
to the app they should declare here.

2. app.component.ts:define the application's root component ,named AppComponent. the view associated with this root component becomes the root of view hierarchy
as you add component and services in your app.

3. app.component.html: define the html template associated with AppComponent

4. app.component.css : define the css stylesheet for AppComponent.

5. app.component.spec.ts: define unit test for AppComponent

so we see that in our index.html our default component is loaded and we are just configuring that particuler component in main.ts

so main concept in angular is component :
component play a crucial role in angular , component is core building block of the anguler application and they are used for reusability

how we create a component :
ng generate component componentname
or
ng g c componentname
-> when we create a component 
---> it create a componentname folder 
         .ts
         .css
         .html
         .spec.ts

# supposen for my project i want to create two component ;
1, one thing where you want to create -> in yur project folder my project folder is right now demo 
so i just open the demo directory in my command , when you want to put all of the component in one folder then jsut define a folder like in demo directory
in cmd write ng g c components/home like where components folder in main folder where we can put all component 
like just when components folder is not present in app folder then make a components folder like this 
so first component i just creating i shome component 
like ng g c components/home
and second component is i am creating about 
like ng g c components/about
so now when i see file structure in demo folder then in src folder in app folder a components folder present in which two folder present home and about and in these folder in every folder these four file present 
app.component.html 
app.component.css
app.component.ts
app.component.spec.ts
** in angular 17, there is a approach of module (AppModule), so if we create a component it automatically update in AppModule 
so that we can use that component anywhere .

but from 17 version , there is concept of standalone component, if we create a component by default they are standalone.

-> standalone component : standalone component are those component : they are self-contained units of code that can be used anywhere 
in the application without being of an module 

before this anguler 17 , if we create a component , it automatically load in a appmodule , if it automatically load in app module so either it can use 
or not it execute the memory ?
thats why the reason anguler introduced the standalone components 
whenever you have a requirment , you just need to inject it , otherwise it can not take any of the memory .
understand these are the standalone component.

--> how we call the component in another component 
like when you add two component like home and about in app folder in src folder and when run the application it give error
but in app folder in app.component.ts when you import AboutComponent and HomeComponent then application properly work
so there is no make sense to add standalone true for component by default components are standalone 

#### so how to call other component from another component 
you just import app.componentname and in app folder in app.component.ts you just import alongwith routeroutlet all that component like HomeComponent , AboutComponent

### started importent feature concepts:-
so first is data binding (dynamic data binding):
databinding work in two ways:=
   ---> one way databinding 
   ---. two way data binding 

--. one way binding;
in that data flow from one direction either from view to component or component to view 
    -- from component to view :- assume that component means ts file where we have some data and in a view we want to render that data 
    we want to display that dynamic data 
    so from component to view we have concept of interpolation/expression 
    {{}}
    eg:
    in your component file .ts i have a title 
    tite="Hello Guys"
    .html (and in html in view we want to render that data that is dynamic data)
    <h2>{{title}}</h2>### one way data binding from component to view

    --. property binding []:
    it allows us to bind html element attributes to a property in a component.
    assume that in my home component i have a property like isActive , i have a varibale which is boolean , bydefult i assigning the value true 
    so with the help of property binding we can bind this property to the attribute of the element , asume that i have a button , there is attribute disabled ([disabled]) 
    and i am just binding to the property binding like [disabled]="isActive"
    .ts
    imagePath:string="";
    .html
    <img [src]="imagePath"/>

    --> from view to component 
       --> event binding 
       it is achived with the hep of parenthesis (): event binding simple means event handling , it allow us to bind events such as click ,dblclick,
       mouseover, to a method in a component 
       eg:
       .html
       <button (click)="xyz()"></button>
      .ts
      xyz(){
         alert("Hello");
      }

   next topic :
   ---> two way data binding 
   ---> directives (if , for , switch)
   ---> routing (spa)

   ### 2 way data binding :it allow data to flow between a component and view , keeping them sync.it means that when you change the data in component then 
   it automatically change in view . and same if there change anything in view it automatically change in component also.
   when data change in a model the view reflect the changes and vice versa .
   this two way data binding achived withthe help of property binding and event binding combination of these two binding property binding and event binding 
   [()] : banana syntex (property + event )
    -> used in form field 
    to use two way data binding we use ngModel directive , so that property we finds in forms module then first we need to load FormsModule
like we use two way data binding in test component in test.component.html we use a input tag in which we use banana syntex in which we put ngModel
and give some property to that attribute of input like [(ngModel)]=name where name is property in test.component.ts so wheneever we update or change the input value it automatically
changes also in view in name value in test.component.ts like whenever we perform changes in component in anydata then that data also change automatically in view .

for this you also put in import in test.component.ts FormsModule .

ngmodelis property of FormsModule and ngmodel is directive a builtin directive and by which we got two way data binding.


--> directives in anular:-
they are defined as classes
that can add new behaviours to the element or modifying existing behaviours.
with the help of it what happen assume that in a page i have some content so i want to change the look 
and feel of the element at runtime or we want to change some dynamic data , i just want to remove that particuler element from the dom
or we just need to add a new element these all the thing dynamically which is happen with the help of directives 

--> it is used to manipulate the dom by adding new element or removing and even changing the appearence of the element .

--. types of directives :
1. component directive : every component work as a directive because it have template or template url.(app-componentname)
2. attribute directive ; is used to make behavoiur or element changes in the appearence of a element (styles) so basically for changing the styling part and all we can use 
the attribute directive so whenever we dynamically we want to change some style and all so we have some in build attribute directive that we are using like 
(inbuild: ngStyle or ngClass )
3. structural directive : structural directive is iused for the dom manipulation , it is used to make the changes in layout of the dom 
element can be added or remove , it chANGES THE STRUCRE OF THE DOM (inbuild: *ngIf , *ngFor, *ngSwitch)
after angular 16 we can use this like @if @for @switch 
*ngIf :- for conditional rendering . it conditionally include template if value is true 
eg:
in .ts file 
courses:[]string=["A","B","C","D"]
.html
<div *ngIf="courses.length>0 else xyz">
//courses display</div>
<ng-template #xyz>No Course found</ng-template>

#### if you want to use old in build directive you need to import CommonModule in your web page 
ngIf directive not working for this you also must need to import CommonModule in in test.component.ts and for working of ng-template you need to import NgTemplateModule in test.component.ts 

--> *ngFor : it work like a loop , it renders each element for the given collections whenever loop is going on 
syntex :
<ul>
<li *ngFor="let c of courses">{{c}}</li></ul>


---> ngStyle : basically it updates style for the element , so whenever you just need to call it anywhere , it like a property binding it just bind it [ngStyle] and as an atribute we can call anywhere 
<element [ngStyle]="{}"></element>

---> ngClass : it allow us to set css class dynamically to an element .
[ngClass]="{'success':condition}"

----#### Boot strap is nothing it is css property and framework it provide us a inbuild class 

how we integrate bottstrap in angular 
   -> npm install bootstrap --save, in your project like in deo directory you first need to install bootstrap after installation of bootstrap
   in demo in src folder in angular.json file in styles key put one more value like "node_nodules/bootstrap/dist/css/bootstrap.min.css"
   and in scripts key put value like this "node_nodules/bootstrap/dist/js/bootstrap.bundle.js"

--> restart the application 
so whenever any changes in angular.json file you need to restart it so in command prompt in demo directry first for restart write cls and hit enter then
run ng serve --o


$$$$#### angular pipes :-
they are spaical operator that allows us to transform data in our template .
to use pipes we have (|) pipe symbols 
--> we have inbuild pipes 
Uppercase 
Lowercase
Date
titlecase
currency
async
percent
slice 
--> in new version to use pipe we need to import CommonModule same as we use for ngFor nad all directives 
like in about component i use currency pipes
in about.component.ts i put a amount:Number=568789;
and in about.component.html i put <P> {{amount|currency}}</p> but i got error 
because currency take string format so i replace Number from any datatype in about.component.ts or you can replace with also string but you should give value in quotes.

#### Routing :
It enable navigation between different views or components because it is a single page application navigating from one view to another 
so basic definition is that it enable navigation between different views and components within a single page application.
it allow user to move between multiple pages without reloading the whole page 
in routing have some terms :->
Routing have some 
-> RouterModule: it enables routing functionality in angular

-> Routes: here we define the path .(URLs) and associate components to display when a specific path is match with URL.
eg:
export const routes:Routes=[
   {path:'',component:HomeComponent},
   {path:'about-us',component:AboutComponent}
];

-> RouterOutlet:  it is the directive which is load the component when path is matched with the url (container)
<router-outlet></router-outlet>
-> RouterLink: it is the directive which is used to define links (hyper links) in angular application.
<a RouterLink="/">Home </a>
<a RouterLink="/about-us">About Us </a>
-> 

it means that in a , in a routing mechanism if you just click on about us it just check a path in this line    
export const routes:Routes=[
   {path:'',component:HomeComponent},
   {path:'about-us',component:AboutComponent}
];
if path is matched , about component is load in a routeroutlet <router-outlet></router-outlet>